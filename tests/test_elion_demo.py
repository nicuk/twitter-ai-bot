"""
Demo script to test Elion's main functionalities
"""
import sys
from datetime import datetime
import os

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import elion.elion as elion_module
from elion.data_sources import DataSources
from elion.portfolio import PortfolioManager
from elion.content.generator import ContentGenerator
from elion.content.tweet_formatters import TweetFormatters

class MockCryptoRankAPI:
    def __init__(self, api_key=None):
        pass

class MockLLM:
    def generate_tweet(self, prompt, min_chars=180, max_chars=280):
        """Mock LLM that returns test data"""
        return "This is a test tweet generated by the mock LLM"
        
    def analyze_project(self, project_data):
        """Mock project analysis"""
        return {
            'score': 85,
            'conviction': 'HIGH',
            'analysis': 'Strong fundamentals, active development'
        }
        
    def analyze_market(self, market_data):
        """Mock market analysis"""
        return {
            'sentiment': 'Bullish',
            'analysis': 'Market showing strong momentum'
        }

class MockPortfolio:
    def __init__(self):
        self.positions = []
        self.available_cash = 100000
        
    def calculate_position_size(self, conviction, score=None):
        size_map = {
            'EXTREMELY HIGH': 11250,  # 11.25%
            'HIGH': 7500,            # 7.5%
            'MEDIUM': 3750,          # 3.75%
            'LOW': 2500              # 2.5%
        }
        return size_map.get(conviction, 2500)
        
    def open_position(self, symbol, amount, price, score=None, conviction=None):
        return {
            'success': True,
            'position': {
                'size_usd': amount * price,
                'entry_price': price,
                'amount': amount,
                'score': score,
                'conviction': conviction
            }
        }
        
    def get_portfolio_stats(self):
        return {
            'total_value': 150000,
            'total_roi': 0.5,
            'win_rate': 0.75,
            'available_cash': 50000,
            'positions': [
                {
                    'symbol': 'TEST1',
                    'roi': 0.8,
                    'value': 20000,
                    'entry_time': datetime.now(),
                    'score': 85,
                    'conviction': 'HIGH'
                },
                {
                    'symbol': 'TEST2',
                    'roi': 0.3,
                    'value': 15000,
                    'entry_time': datetime.now(),
                    'score': 75,
                    'conviction': 'MEDIUM'
                }
            ]
        }

class MockDataSources:
    def __init__(self):
        pass
        
    def get_market_data(self):
        """Mock market data"""
        return {
            'sentiment': 'Bullish',
            'btc_dominance': 45.5,
            'market_cap': 2.1e12,
            'volume_24h': 100e9,
            'fear_greed_index': 65,
            'trending_coins': ['BTC', 'ETH', 'SOL']
        }
        
    def get_hot_projects(self):
        """Mock hot projects"""
        return [
            {
                'symbol': 'HOT1',
                'score': 85,
                'market_data': {
                    'market_cap': 10e6,
                    'price': 1.0,
                    'volume': 1e6
                }
            },
            {
                'symbol': 'HOT2',
                'score': 80,
                'market_data': {
                    'market_cap': 5e6,
                    'price': 0.5,
                    'volume': 500e3
                }
            }
        ]
        
    def get_shill_opportunities(self):
        """Mock shill opportunities"""
        return [
            {
                'name': 'Test Token',
                'symbol': 'TEST',
                'score': 85,
                'market_data': {
                    'market_cap': 1e6,
                    'volume': 500e3,
                    'price': 1.0,
                    'price_change': 5.5
                },
                'analysis': 'Strong fundamentals, active development',
                'conviction_level': 'HIGH'
            }
        ]

class MockPersonality:
    def __init__(self):
        self.current_persona = 'alpha_hunter'
        
    def generate(self, *args, **kwargs):
        """Mock personality generation"""
        return "I am Elion, your friendly AI trading bot! ðŸ¤–"
        
    def enhance_with_persona(self, content, persona=None, context=None, user=None):
        """Mock persona enhancement"""
        return f"{content} #ElionAlpha"
        
    def get_random_persona(self):
        """Mock random persona"""
        return 'alpha_hunter'
        
    def enhance_tweet(self, content, persona=None, context=None, user=None):
        """Mock tweet enhancement"""
        return f"{content} ðŸš€"

def print_tweet_quality(tweet):
    """Print tweet quality metrics"""
    if not tweet:
        print("No tweet generated")
        return
        
    length = len(tweet)
    has_emoji = 'ðŸ¤–' in tweet or 'ðŸ“ˆ' in tweet or 'ðŸ’°' in tweet
    has_hashtag = '#' in tweet
    has_cashtag = '$' in tweet
    
    print(f"\nTweet Quality Metrics:")
    print(f"Length: {length} chars")
    print(f"Has Emoji: {has_emoji}")
    print(f"Has Hashtag: {has_hashtag}")
    print(f"Has Cashtag: {has_cashtag}")
    print(f"\nTweet Content:")
    print(f"{tweet}\n")

def main():
    """Main demo function"""
    # Initialize components
    mock_llm = MockLLM()
    mock_data = MockDataSources()
    mock_portfolio = MockPortfolio()
    
    # Create Elion instance
    elion = elion_module.Elion(llm=mock_llm)
    elion.data_sources = mock_data
    elion.portfolio = mock_portfolio
    
    # Test market alpha
    print("\nTesting Market Alpha:")
    market_tweet = elion.process_market_alpha()
    print_tweet_quality(market_tweet)
    
    # Test gem alpha
    print("\nTesting Gem Alpha:")
    gem_tweet = elion.process_gem_alpha()
    print_tweet_quality(gem_tweet)
    
    # Test shill review
    print("\nTesting Shill Review:")
    shill_tweet = elion.process_shill_review()
    print_tweet_quality(shill_tweet)
    
    # Test portfolio update
    print("\nTesting Portfolio Update:")
    portfolio_tweet = elion.get_portfolio_update()
    print_tweet_quality(portfolio_tweet)

if __name__ == "__main__":
    # Set console encoding to UTF-8 for emoji support
    sys.stdout.reconfigure(encoding='utf-8')
    main()
